{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///./psychrolib.js","webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./container.tsx","webpack:///./jmath.ts","webpack:///./color.ts","webpack:///./psystate.ts","webpack:///./psychart.ts","webpack:///./panel.tsx","webpack:///./icons.ts","webpack:///./module.ts","webpack:///./formatter.ts"],"sourcesContent":["/*\n * PsychroLib (version 2.5.0) (https://github.com/psychrometrics/psychrolib).\n * Copyright (c) 2018-2020 The PsychroLib Contributors for the current library implementation.\n * Copyright (c) 2017 ASHRAE Handbook — Fundamentals for ASHRAE equations and coefficients.\n * Licensed under the MIT License.\n */\n\nfunction Psychrometrics() {\n  /**\n   * Module overview\n   *  Contains functions for calculating thermodynamic properties of gas-vapor mixtures\n   *  and standard atmosphere suitable for most engineering, physical and meteorological\n   *  applications.\n   *\n   *  Most of the functions are an implementation of the formulae found in the\n   *  2017 ASHRAE Handbook - Fundamentals, in both International System (SI),\n   *  and Imperial (IP) units. Please refer to the information included in\n   *  each function for their respective reference.\n   *\n   * Example (e.g. Node.JS)\n   *  // Import the PsychroLib\n   *  var psychrolib = require('./psychrolib.js')\n   *  // Set unit system\n   *  psychrolib.SetUnitSystem(psychrolib.SI)\n   *  // Calculate the dew point temperature for a dry bulb temperature of 25 C and a relative humidity of 80%\n   *  var TDewPoint = psychrolib.GetTDewPointFromRelHum(25.0, 0.80);\n   *  console.log('TDewPoint: %d', TDewPoint);\n   * 21.3094\n   *\n   * Copyright\n   *  - For the current library implementation\n   *     Copyright (c) 2018-2020 The PsychroLib Contributors.\n   *  - For equations and coefficients published ASHRAE Handbook — Fundamentals, Chapter 1\n   *     Copyright (c) 2017 ASHRAE Handbook — Fundamentals (https://www.ashrae.org)\n   *\n   * License\n   *  MIT (https://github.com/psychrometrics/psychrolib/LICENSE.txt)\n   *\n   * Note from the Authors\n   *  We have made every effort to ensure that the code is adequate, however, we make no\n   *  representation with respect to its accuracy. Use at your own risk. Should you notice\n   *  an error, or if you have a suggestion, please notify us through GitHub at\n   *  https://github.com/psychrometrics/psychrolib/issues.\n   */\n\n\n  // Standard functions\n  var log = Math.log;\n  var exp = Math.exp;\n  var pow = Math.pow;\n  var min = Math.min;\n  var max = Math.max;\n  var abs = Math.abs;\n\n\n  /******************************************************************************************************\n   * Global constants\n   *****************************************************************************************************/\n\n  var ZERO_FAHRENHEIT_AS_RANKINE = 459.67;  // Zero degree Fahrenheit (°F) expressed as degree Rankine (°R).\n                                            // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 39.\n\n  var ZERO_CELSIUS_AS_KELVIN = 273.15;      // Zero degree Celsius (°C) expressed as Kelvin (K).\n                                            // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 39.\n\n  var R_DA_IP = 53.350;               // Universal gas constant for dry air (IP version) in ft lb_Force lb_DryAir⁻¹ R⁻¹.\n                                      // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1.\n\n  var R_DA_SI = 287.042;              // Universal gas constant for dry air (SI version) in J kg_DryAir⁻¹ K⁻¹.\n                                      // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1.\n\n  var INVALID = -99999;               // Invalid value (dimensionless).\n\n  var MAX_ITER_COUNT = 100            // Maximum number of iterations before exiting while loops.\n\n  var MIN_HUM_RATIO = 1e-7            // Minimum acceptable humidity ratio used/returned by any functions.\n                                      // Any value above 0 or below the MIN_HUM_RATIO will be reset to this value.\n\n  var FREEZING_POINT_WATER_IP = 32.0  // Freezing point of water in Fahrenheit.\n\n  var FREEZING_POINT_WATER_SI = 0.0   // Freezing point of water in Celsius.\n\n  var TRIPLE_POINT_WATER_IP = 32.018  // Triple point of water in Fahrenheit.\n\n  var TRIPLE_POINT_WATER_SI = 0.01    // Triple point of water in Celsius.\n\n\n\n  /******************************************************************************************************\n   * Helper functions\n   *****************************************************************************************************/\n\n  // Systems of units (IP or SI)\n  var PSYCHROLIB_UNITS = undefined;\n\n  // Floating-point tolerance value\n  var PSYCHROLIB_TOLERANCE = undefined;\n\n  this.IP = 1;\n  this.SI = 2;\n\n  // Function to set the system of units\n  // Note: this function *HAS TO BE CALLED* before the library can be used\n  this.SetUnitSystem = function(UnitSystem) {\n    if (UnitSystem != this.IP && UnitSystem != this.SI) {\n      throw new Error('UnitSystem must be IP or SI');\n    }\n    PSYCHROLIB_UNITS = UnitSystem;\n    // Define tolerance of temperature calculations\n    // The tolerance is the same in IP and SI\n    if (PSYCHROLIB_UNITS == this.IP)\n      PSYCHROLIB_TOLERANCE = 0.001 * 9. / 5.;\n    else\n      PSYCHROLIB_TOLERANCE = 0.001;\n  }\n\n  // Return system of units in use.\n  this.GetUnitSystem = function() {\n    return PSYCHROLIB_UNITS;\n  }\n\n  // Function to check if the current system of units is SI or IP\n  // The function exits in error if the system of units is undefined\n  this.isIP = function() {\n    if (PSYCHROLIB_UNITS == this.IP)\n      return true;\n    else if (PSYCHROLIB_UNITS == this.SI)\n      return false;\n    else\n      throw new Error(\"Unit system is not defined\");\n  }\n\n\n  /******************************************************************************************************\n   * Conversion between temperature units\n   *****************************************************************************************************/\n\n  // Utility function to convert temperature to degree Rankine (°R)\n  // given temperature in degree Fahrenheit (°F).\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3\n  this.GetTRankineFromTFahrenheit = function (T_F) { return T_F + ZERO_FAHRENHEIT_AS_RANKINE; }       /* exact */\n\n  // Utility function to convert temperature to degree Fahrenheit (°F)\n  // given temperature in degree Rankine (°R).\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3\n  this.GetTFahrenheitFromTRankine = function (T_R) { return T_R - ZERO_FAHRENHEIT_AS_RANKINE; }       /* exact */\n\n  // Utility function to convert temperature to Kelvin (K)\n  // given temperature in degree Celsius (°C).\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3\n  this.GetTKelvinFromTCelsius = function (T_C) { return T_C + ZERO_CELSIUS_AS_KELVIN; }               /* exact */\n\n  // Utility function to convert temperature to degree Celsius (°C)\n  // given temperature in Kelvin (K).\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3\n  this.GetTCelsiusFromTKelvin = function (T_K) { return T_K - ZERO_CELSIUS_AS_KELVIN; }                /* exact */\n\n  /******************************************************************************************************\n   * Conversions between dew point, wet bulb, and relative humidity\n   *****************************************************************************************************/\n\n  // Return wet-bulb temperature given dry-bulb temperature, dew-point temperature, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetTWetBulbFromTDewPoint = function  // (o) Wet bulb temperature in °F [IP] or °C [SI]\n    ( TDryBulb                              // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , TDewPoint                             // (i) Dew point temperature in °F [IP] or °C [SI]\n    , Pressure                              // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var HumRatio;\n\n    if (!(TDewPoint <= TDryBulb))\n      throw new Error(\"Dew point temperature is above dry bulb temperature\");\n\n    HumRatio = this.GetHumRatioFromTDewPoint(TDewPoint, Pressure);\n    return this.GetTWetBulbFromHumRatio(TDryBulb, HumRatio, Pressure);\n  }\n\n  // Return wet-bulb temperature given dry-bulb temperature, relative humidity, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetTWetBulbFromRelHum = function // (o) Wet bulb temperature in °F [IP] or °C [SI]\n    ( TDryBulb                          // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , RelHum                            // (i) Relative humidity [0-1]\n    , Pressure                          // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var HumRatio;\n\n    if (!(RelHum >= 0. && RelHum <= 1.))\n      throw new Error(\"Relative humidity is outside range [0,1]\");\n\n    HumRatio = this.GetHumRatioFromRelHum(TDryBulb, RelHum, Pressure);\n    return this.GetTWetBulbFromHumRatio(TDryBulb, HumRatio, Pressure);\n  }\n\n  // Return relative humidity given dry-bulb temperature and dew-point temperature.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 22\n  this.GetRelHumFromTDewPoint = function  // (o) Relative humidity [0-1]\n    ( TDryBulb                            // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , TDewPoint                           // (i) Dew point temperature in °F [IP] or °C [SI]\n    ) {\n    var VapPres, SatVapPres;\n\n    if (!(TDewPoint <= TDryBulb))\n      throw new Error(\"Dew point temperature is above dry bulb temperature\");\n\n    VapPres = this.GetSatVapPres(TDewPoint);\n    SatVapPres = this.GetSatVapPres(TDryBulb);\n    return VapPres / SatVapPres;\n  }\n\n  // Return relative humidity given dry-bulb temperature, wet bulb temperature and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetRelHumFromTWetBulb = function // (o) Relative humidity [0-1]\n    ( TDryBulb                          // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , TWetBulb                          // (i) Wet bulb temperature in °F [IP] or °C [SI]\n    , Pressure                          // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var HumRatio;\n\n    if (!(TWetBulb <= TDryBulb))\n      throw new Error(\"Wet bulb temperature is above dry bulb temperature\");\n\n    HumRatio = this.GetHumRatioFromTWetBulb(TDryBulb, TWetBulb, Pressure);\n    return this.GetRelHumFromHumRatio(TDryBulb, HumRatio, Pressure);\n  }\n\n  // Return dew-point temperature given dry-bulb temperature and relative humidity.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetTDewPointFromRelHum = function  // (o) Dew Point temperature in °F [IP] or °C [SI]\n    ( TDryBulb                            // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , RelHum                              // (i) Relative humidity [0-1]\n    ) {\n    var VapPres;\n\n    if (!(RelHum >= 0. && RelHum <= 1.))\n      throw new Error(\"Relative humidity is outside range [0,1]\");\n\n    VapPres = this.GetVapPresFromRelHum(TDryBulb, RelHum);\n    return this.GetTDewPointFromVapPres(TDryBulb, VapPres);\n  }\n\n  // Return dew-point temperature given dry-bulb temperature, wet-bulb temperature, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetTDewPointFromTWetBulb = function  // (o) Dew Point temperature in °F [IP] or °C [SI]\n    ( TDryBulb                              // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , TWetBulb                              // (i) Wet bulb temperature in °F [IP] or °C [SI]\n    , Pressure                              // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var HumRatio;\n\n    if (!(TWetBulb <= TDryBulb))\n      throw new Error(\"Wet bulb temperature is above dry bulb temperature\");\n\n    HumRatio = this.GetHumRatioFromTWetBulb(TDryBulb, TWetBulb, Pressure);\n    return this.GetTDewPointFromHumRatio(TDryBulb, HumRatio, Pressure);\n  }\n\n\n  /******************************************************************************************************\n   * Conversions between dew point, or relative humidity and vapor pressure\n   *****************************************************************************************************/\n\n  // Return partial pressure of water vapor as a function of relative humidity and temperature.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22\n  this.GetVapPresFromRelHum = function  // (o) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n    ( TDryBulb                          // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , RelHum                            // (i) Relative humidity [0-1]\n    ) {\n\n    if (!(RelHum >= 0. && RelHum <= 1.))\n      throw new Error(\"Relative humidity is outside range [0,1]\");\n\n    return RelHum * this.GetSatVapPres(TDryBulb);\n  }\n\n  // Return relative humidity given dry-bulb temperature and vapor pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22\n  this.GetRelHumFromVapPres = function  // (o) Relative humidity [0-1]\n    ( TDryBulb                          // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , VapPres                           // (i) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n    ) {\n\n    if (!(VapPres >= 0.))\n      throw new Error(\"Partial pressure of water vapor in moist air is negative\");\n\n    return VapPres / this.GetSatVapPres(TDryBulb);\n  }\n\n  // Helper function returning the derivative of the natural log of the saturation vapor pressure\n  // as a function of dry-bulb temperature.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 5 & 6\n  this.dLnPws_ = function       // (o)  Derivative of natural log of vapor pressure of saturated air in Psi [IP] or Pa [SI]\n    ( TDryBulb                  // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    ) {\n    var dLnPws, T;\n\n    if (this.isIP())\n    {\n      T = this.GetTRankineFromTFahrenheit(TDryBulb);\n\n      if (TDryBulb <= TRIPLE_POINT_WATER_IP)\n        dLnPws = 1.0214165E+04 / pow(T, 2) - 5.3765794E-03 + 2 * 1.9202377E-07 * T\n                 + 3 * 3.5575832E-10 * pow(T, 2) - 4 * 9.0344688E-14 * pow(T, 3) + 4.1635019 / T;\n      else\n        dLnPws = 1.0440397E+04 / pow(T, 2) - 2.7022355E-02 + 2 * 1.2890360E-05 * T\n                 - 3 * 2.4780681E-09 * pow(T, 2) + 6.5459673 / T;\n    }\n    else\n    {\n      T = this.GetTKelvinFromTCelsius(TDryBulb);\n\n      if (TDryBulb <= TRIPLE_POINT_WATER_SI)\n        dLnPws = 5.6745359E+03 / pow(T, 2) - 9.677843E-03 + 2 * 6.2215701E-07 * T\n                 + 3 * 2.0747825E-09 * pow(T, 2) - 4 * 9.484024E-13 * pow(T, 3) + 4.1635019 / T;\n      else\n        dLnPws = 5.8002206E+03 / pow(T, 2) - 4.8640239E-02 + 2 * 4.1764768E-05 * T\n                 - 3 * 1.4452093E-08 * pow(T, 2) + 6.5459673 / T;\n    }\n\n    return dLnPws;\n  }\n\n  // Return dew-point temperature given dry-bulb temperature and vapor pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 5 and 6\n  // Notes: the dew point temperature is solved by inverting the equation giving water vapor pressure\n  // at saturation from temperature rather than using the regressions provided\n  // by ASHRAE (eqn. 37 and 38) which are much less accurate and have a\n  // narrower range of validity.\n  // The Newton-Raphson (NR) method is used on the logarithm of water vapour\n  // pressure as a function of temperature, which is a very smooth function\n  // Convergence is usually achieved in 3 to 5 iterations.\n  // TDryBulb is not really needed here, just used for convenience.\n  this.GetTDewPointFromVapPres = function // (o) Dew Point temperature in °F [IP] or °C [SI]\n    ( TDryBulb                            // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , VapPres                             // (i) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n    ) {\n   // Bounds function of the system of units\n  var BOUNDS              // Domain of validity of the equations\n\n  if (this.isIP())\n  {\n    BOUNDS = [-148., 392.];   // Domain of validity of the equations\n  }\n  else\n  {\n    BOUNDS = [-100., 200.];   // Domain of validity of the equations\n  }\n\n  // Bounds outside which a solution cannot be found\n  if (VapPres < this.GetSatVapPres(BOUNDS[0]) || VapPres > this.GetSatVapPres(BOUNDS[1]))\n    throw new Error(\"Partial pressure of water vapor is outside range of validity of equations\");\n\n  // We use NR to approximate the solution.\n  // First guess\n  var TDewPoint = TDryBulb;      // Calculated value of dew point temperatures, solved for iteratively in °F [IP] or °C [SI]\n  var lnVP = log(VapPres);       // Natural logarithm of partial pressure of water vapor pressure in moist air\n\n  var TDewPoint_iter;            // Value of TDewPoint used in NR calculation\n  var lnVP_iter;                 // Value of log of vapor water pressure used in NR calculation\n  var index = 1;\n  do\n  {\n    // Current point\n    TDewPoint_iter = TDewPoint;\n    lnVP_iter = log(this.GetSatVapPres(TDewPoint_iter));\n\n    // Derivative of function, calculated analytically\n    var d_lnVP = this.dLnPws_(TDewPoint_iter);\n\n    // New estimate, bounded by domain of validity of eqn. 5 and 6\n    TDewPoint = TDewPoint_iter - (lnVP_iter - lnVP) / d_lnVP;\n    TDewPoint = max(TDewPoint, BOUNDS[0]);\n    TDewPoint = min(TDewPoint, BOUNDS[1]);\n\n    if (index > MAX_ITER_COUNT)\n      throw new Error(\"Convergence not reached in GetTDewPointFromVapPres. Stopping.\");\n\n    index++;\n  }\n  while (abs(TDewPoint - TDewPoint_iter) > PSYCHROLIB_TOLERANCE);\n  return min(TDewPoint, TDryBulb);\n  }\n\n  // Return vapor pressure given dew point temperature.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 36\n  this.GetVapPresFromTDewPoint = function // (o) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n    ( TDewPoint                           // (i) Dew point temperature in °F [IP] or °C [SI]\n    ) {\n    return this.GetSatVapPres(TDewPoint);\n  }\n\n\n  /******************************************************************************************************\n   * Conversions from wet-bulb temperature, dew-point temperature, or relative humidity to humidity ratio\n   *****************************************************************************************************/\n\n  // Return wet-bulb temperature given dry-bulb temperature, humidity ratio, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 solved for Tstar\n  this.GetTWetBulbFromHumRatio = function // (o) Wet bulb temperature in °F [IP] or °C [SI]\n    ( TDryBulb                            // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , HumRatio                            // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    , Pressure                            // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    // Declarations\n    var Wstar;\n    var TDewPoint, TWetBulb, TWetBulbSup, TWetBulbInf, BoundedHumRatio;\n    var index = 1;\n\n    if (!(HumRatio >= 0.))\n      throw new Error(\"Humidity ratio is negative\");\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    TDewPoint = this.GetTDewPointFromHumRatio(TDryBulb, BoundedHumRatio, Pressure);\n\n    // Initial guesses\n    TWetBulbSup = TDryBulb;\n    TWetBulbInf = TDewPoint;\n    TWetBulb = (TWetBulbInf + TWetBulbSup) / 2.;\n\n    // Bisection loop\n    while ((TWetBulbSup - TWetBulbInf) > PSYCHROLIB_TOLERANCE) {\n      // Compute humidity ratio at temperature Tstar\n      Wstar = this.GetHumRatioFromTWetBulb(TDryBulb, TWetBulb, Pressure);\n\n      // Get new bounds\n      if (Wstar > BoundedHumRatio)\n        TWetBulbSup = TWetBulb;\n      else\n        TWetBulbInf = TWetBulb;\n\n      // New guess of wet bulb temperature\n      TWetBulb = (TWetBulbSup + TWetBulbInf) / 2.;\n\n      if (index > MAX_ITER_COUNT)\n        throw new Error(\"Convergence not reached in GetTWetBulbFromHumRatio. Stopping.\");\n\n      index++;\n    }\n\n    return TWetBulb;\n  }\n\n  // Return humidity ratio given dry-bulb temperature, wet-bulb temperature, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35\n  this.GetHumRatioFromTWetBulb = function // (o) Humidity Ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    ( TDryBulb                            // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , TWetBulb                            // (i) Wet bulb temperature in °F [IP] or °C [SI]\n    , Pressure                            // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var Wsstar;\n    var HumRatio = INVALID\n\n    if (!(TWetBulb <= TDryBulb))\n      throw new Error(\"Wet bulb temperature is above dry bulb temperature\");\n\n      Wsstar = this.GetSatHumRatio(TWetBulb, Pressure);\n\n      if (this.isIP())\n      {\n        if (TWetBulb >= FREEZING_POINT_WATER_IP)\n          HumRatio = ((1093. - 0.556 * TWetBulb) * Wsstar - 0.240 * (TDryBulb - TWetBulb))\n          / (1093. + 0.444 * TDryBulb - TWetBulb);\n        else\n          HumRatio = ((1220. - 0.04 * TWetBulb) * Wsstar - 0.240 * (TDryBulb - TWetBulb))\n          / (1220. + 0.444 * TDryBulb - 0.48 * TWetBulb);\n      }\n      else\n      {\n        if (TWetBulb >= FREEZING_POINT_WATER_SI)\n          HumRatio = ((2501. - 2.326 * TWetBulb) * Wsstar - 1.006 * (TDryBulb - TWetBulb))\n             / (2501. + 1.86 * TDryBulb - 4.186 * TWetBulb);\n        else\n          HumRatio = ((2830. - 0.24 * TWetBulb) * Wsstar - 1.006 * (TDryBulb - TWetBulb))\n             / (2830. + 1.86 * TDryBulb - 2.1 * TWetBulb);\n      }\n      // Validity check.\n      return max(HumRatio, MIN_HUM_RATIO);\n    }\n\n  // Return humidity ratio given dry-bulb temperature, relative humidity, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetHumRatioFromRelHum = function // (o) Humidity Ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    ( TDryBulb                          // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , RelHum                            // (i) Relative humidity [0-1]\n    , Pressure                          // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var VapPres;\n\n    if (!(RelHum >= 0. && RelHum <= 1.))\n      throw new Error(\"Relative humidity is outside range [0,1]\");\n\n    VapPres = this.GetVapPresFromRelHum(TDryBulb, RelHum);\n    return this.GetHumRatioFromVapPres(VapPres, Pressure);\n  }\n\n  // Return relative humidity given dry-bulb temperature, humidity ratio, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetRelHumFromHumRatio = function // (o) Relative humidity [0-1]\n    ( TDryBulb                          // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , HumRatio                          // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    , Pressure                          // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var VapPres;\n\n    if (!(HumRatio >= 0.))\n      throw new Error(\"Humidity ratio is negative\");\n\n    VapPres = this.GetVapPresFromHumRatio(HumRatio, Pressure);\n    return this.GetRelHumFromVapPres(TDryBulb, VapPres);\n  }\n\n  // Return humidity ratio given dew-point temperature and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetHumRatioFromTDewPoint = function  // (o) Humidity Ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    ( TDewPoint                             // (i) Dew point temperature in °F [IP] or °C [SI]\n    , Pressure                              // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var VapPres;\n\n    VapPres = this.GetSatVapPres(TDewPoint);\n    return this.GetHumRatioFromVapPres(VapPres, Pressure);\n  }\n\n  // Return dew-point temperature given dry-bulb temperature, humidity ratio, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetTDewPointFromHumRatio = function  // (o) Dew Point temperature in °F [IP] or °C [SI]\n    ( TDryBulb                              // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , HumRatio                              // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    , Pressure                              // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var VapPres;\n\n    if (!(HumRatio >= 0.))\n      throw new Error(\"Humidity ratio is negative\");\n\n    VapPres = this.GetVapPresFromHumRatio(HumRatio, Pressure);\n    return this.GetTDewPointFromVapPres(TDryBulb, VapPres);\n  }\n\n\n  /******************************************************************************************************\n   * Conversions between humidity ratio and vapor pressure\n   *****************************************************************************************************/\n\n  // Return humidity ratio given water vapor pressure and atmospheric pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 20\n  this.GetHumRatioFromVapPres = function  // (o) Humidity Ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    ( VapPres                             // (i) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n    , Pressure                            // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var HumRatio;\n\n    if (!(VapPres >= 0.))\n      throw new Error(\"Partial pressure of water vapor in moist air is negative\");\n\n    HumRatio = 0.621945 * VapPres / (Pressure - VapPres);\n\n    // Validity check.\n    return max(HumRatio, MIN_HUM_RATIO);\n  }\n\n  // Return vapor pressure given humidity ratio and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 20 solved for pw\n  this.GetVapPresFromHumRatio = function  // (o) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n    ( HumRatio                            // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    , Pressure                            // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var VapPres, BoundedHumRatio;\n\n    if (!(HumRatio >= 0.))\n      throw new Error(\"Humidity ratio is negative\");\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    VapPres = Pressure * BoundedHumRatio / (0.621945 + BoundedHumRatio);\n    return VapPres;\n  }\n\n\n  /******************************************************************************************************\n   * Conversions between humidity ratio and specific humidity\n   *****************************************************************************************************/\n\n  // Return the specific humidity from humidity ratio (aka mixing ratio)\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b\n  this.GetSpecificHumFromHumRatio = function  // (o) Specific humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    ( HumRatio                                // (i) Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI]\n    ) {\n    var BoundedHumRatio;\n    if (!(HumRatio >= 0.))\n      throw new Error(\"Humidity ratio is negative\");\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    return BoundedHumRatio / (1.0 + BoundedHumRatio);\n  }\n\n  // Return the humidity ratio (aka mixing ratio) from specific humidity\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b (solved for humidity ratio)\n  this.GetHumRatioFromSpecificHum = function  // (o) Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI]\n    ( SpecificHum                             // (i) Specific humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    ) {\n    var HumRatio;\n\n    if (!(SpecificHum >= 0.0 && SpecificHum < 1.0))\n      throw new Error(\"Specific humidity is outside range [0, 1)\");\n\n    HumRatio = SpecificHum / (1.0 - SpecificHum);\n\n    // Validity check\n    return max(HumRatio, MIN_HUM_RATIO);\n  }\n\n\n  /******************************************************************************************************\n   * Dry Air Calculations\n   *****************************************************************************************************/\n\n  // Return dry-air enthalpy given dry-bulb temperature.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 28\n  this.GetDryAirEnthalpy = function // (o) Dry air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI]\n    ( TDryBulb                      // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    ) {\n    if (this.isIP())\n      return 0.240 * TDryBulb;\n    else\n      return 1006. * TDryBulb;\n  }\n\n  // Return dry-air density given dry-bulb temperature and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  // Notes: eqn 14 for the perfect gas relationship for dry air.\n  // Eqn 1 for the universal gas constant.\n  // The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻².\n  this.GetDryAirDensity = function  // (o) Dry air density in lb ft⁻³ [IP] or kg m⁻³ [SI]\n    ( TDryBulb                      // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , Pressure                      // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    if (this.isIP())\n      return (144. * Pressure) / R_DA_IP / this.GetTRankineFromTFahrenheit(TDryBulb);\n    else\n      return Pressure / R_DA_SI / this.GetTKelvinFromTCelsius(TDryBulb);\n  }\n\n  // Return dry-air volume given dry-bulb temperature and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1.\n  // Notes: eqn 14 for the perfect gas relationship for dry air.\n  // Eqn 1 for the universal gas constant.\n  // The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻².\n  this.GetDryAirVolume = function // (o) Dry air volume ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI]\n    ( TDryBulb                    // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , Pressure                    // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    if (this.isIP())\n      return R_DA_IP * this.GetTRankineFromTFahrenheit(TDryBulb) / (144. * Pressure);\n    else\n      return R_DA_SI * this.GetTKelvinFromTCelsius(TDryBulb) / Pressure;\n  }\n\n  // Return dry bulb temperature from enthalpy and humidity ratio.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30.\n  // Notes: based on the `GetMoistAirEnthalpy` function, rearranged for temperature.\n  this.GetTDryBulbFromEnthalpyAndHumRatio = function   // (o) Dry-bulb temperature in °F [IP] or °C [SI]\n    ( MoistAirEnthalpy                                 // (i) Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹\n    , HumRatio                                         // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    ) {\n    var BoundedHumRatio;\n    if (!(HumRatio >= 0.))\n      throw new Error(\"Humidity ratio is negative\");\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    if (this.isIP())\n      return (MoistAirEnthalpy - 1061.0 * BoundedHumRatio) / (0.240 + 0.444 * BoundedHumRatio);\n    else\n      return (MoistAirEnthalpy / 1000.0 - 2501.0 * BoundedHumRatio) / (1.006 + 1.86 * BoundedHumRatio);\n    }\n\n  // Return humidity ratio from enthalpy and dry-bulb temperature.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30.\n  // Notes: based on the `GetMoistAirEnthalpy` function, rearranged for humidity ratio.\n  this.GetHumRatioFromEnthalpyAndTDryBulb = function   // (o) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻\n    ( MoistAirEnthalpy                                 // (i) Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹\n    , TDryBulb                                         // (i) Dry-bulb temperature in °F [IP] or °C [SI]\n    ) {\n    var HumRatio;\n    if (this.isIP())\n      HumRatio = (MoistAirEnthalpy - 0.240 * TDryBulb) / (1061.0 + 0.444 * TDryBulb);\n    else\n      HumRatio = (MoistAirEnthalpy / 1000.0 - 1.006 * TDryBulb) / (2501.0 + 1.86 * TDryBulb);\n\n    // Validity check.\n    return max(HumRatio, MIN_HUM_RATIO);\n    }\n\n\n  /******************************************************************************************************\n   * Saturated Air Calculations\n   *****************************************************************************************************/\n\n  // Return saturation vapor pressure given dry-bulb temperature.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 5 & 6\n  // Important note: the ASHRAE formulae are defined above and below the freezing point but have\n  // a discontinuity at the freezing point. This is a small inaccuracy on ASHRAE's part: the formulae\n  // should be defined above and below the triple point of water (not the feezing point) in which case\n  // the discontinuity vanishes. It is essential to use the triple point of water otherwise function\n  // GetTDewPointFromVapPres, which inverts the present function, does not converge properly around\n  // the freezing point.\n  this.GetSatVapPres = function // (o) Vapor Pressure of saturated air in Psi [IP] or Pa [SI]\n    ( TDryBulb                  // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    ) {\n    var LnPws, T;\n\n    if (this.isIP())\n    {\n      if (!(TDryBulb >= -148. && TDryBulb <= 392.))\n        throw new Error(\"Dry bulb temperature is outside range [-148, 392]\");\n\n      T = this.GetTRankineFromTFahrenheit(TDryBulb);\n      if (TDryBulb <= TRIPLE_POINT_WATER_IP)\n        LnPws = (-1.0214165E+04 / T - 4.8932428 - 5.3765794E-03 * T + 1.9202377E-07 * T * T\n                + 3.5575832E-10 * pow(T, 3) - 9.0344688E-14 * pow(T, 4) + 4.1635019 * log(T));\n      else\n        LnPws = -1.0440397E+04 / T - 1.1294650E+01 - 2.7022355E-02 * T + 1.2890360E-05 * T * T\n                - 2.4780681E-09 * pow(T, 3) + 6.5459673 * log(T);\n    }\n    else\n    {\n      if (!(TDryBulb >= -100. && TDryBulb <= 200.))\n        throw new Error(\"Dry bulb temperature is outside range [-100, 200]\");\n\n      T = this.GetTKelvinFromTCelsius(TDryBulb);\n      if (TDryBulb <= TRIPLE_POINT_WATER_SI)\n        LnPws = -5.6745359E+03 / T + 6.3925247 - 9.677843E-03 * T + 6.2215701E-07 * T * T\n                + 2.0747825E-09 * pow(T, 3) - 9.484024E-13 * pow(T, 4) + 4.1635019 * log(T);\n      else\n        LnPws = -5.8002206E+03 / T + 1.3914993 - 4.8640239E-02 * T + 4.1764768E-05 * T * T\n                - 1.4452093E-08 * pow(T, 3) + 6.5459673 * log(T);\n    }\n\n    return exp(LnPws);\n  }\n\n  // Return humidity ratio of saturated air given dry-bulb temperature and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36, solved for W\n  this.GetSatHumRatio = function  // (o) Humidity ratio of saturated air in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    ( TDryBulb                    // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , Pressure                    // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var SatVaporPres, SatHumRatio;\n\n    SatVaporPres = this.GetSatVapPres(TDryBulb);\n    SatHumRatio = 0.621945 * SatVaporPres / (Pressure - SatVaporPres);\n\n    // Validity check.\n    return max(SatHumRatio, MIN_HUM_RATIO);\n  }\n\n  // Return saturated air enthalpy given dry-bulb temperature and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetSatAirEnthalpy = function // (o) Saturated air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI]\n    ( TDryBulb                      // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , Pressure                      // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    return this.GetMoistAirEnthalpy(TDryBulb, this.GetSatHumRatio(TDryBulb, Pressure));\n  }\n\n\n  /******************************************************************************************************\n   * Moist Air Calculations\n   *****************************************************************************************************/\n\n  // Return Vapor pressure deficit given dry-bulb temperature, humidity ratio, and pressure.\n  // Reference: see Oke (1987) eqn. 2.13a\n  this.GetVaporPressureDeficit = function  // (o) Vapor pressure deficit in Psi [IP] or Pa [SI]\n    ( TDryBulb            // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , HumRatio            // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    , Pressure            // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var RelHum;\n\n    if (!(HumRatio >= 0.))\n      throw new Error(\"Humidity ratio is negative\");\n\n    RelHum = this.GetRelHumFromHumRatio(TDryBulb, HumRatio, Pressure);\n    return this.GetSatVapPres(TDryBulb) * (1. - RelHum);\n  }\n\n  // Return the degree of saturation (i.e humidity ratio of the air / humidity ratio of the air at saturation\n  // at the same temperature and pressure) given dry-bulb temperature, humidity ratio, and atmospheric pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2009) ch. 1 eqn. 12\n  // Notes: the definition is absent from the 2017 Handbook\n  this.GetDegreeOfSaturation = function // (o) Degree of saturation (unitless)\n    ( TDryBulb                          // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , HumRatio                          // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    , Pressure                          // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var BoundedHumRatio;\n\n    if (!(HumRatio >= 0.))\n      throw new Error(\"Humidity ratio is negative\");\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    return BoundedHumRatio / this.GetSatHumRatio(TDryBulb, Pressure);\n  }\n\n  // Return moist air enthalpy given dry-bulb temperature and humidity ratio.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 30\n  this.GetMoistAirEnthalpy = function // (o) Moist Air Enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI]\n    ( TDryBulb                        // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , HumRatio                        // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    ) {\n    var BoundedHumRatio;\n\n    if (!(HumRatio >= 0.))\n      throw new Error(\"Humidity ratio is negative\");\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    if (this.isIP())\n      return 0.240 * TDryBulb + BoundedHumRatio * (1061. + 0.444 * TDryBulb);\n    else\n      return (1.006 * TDryBulb + BoundedHumRatio * (2501. + 1.86 * TDryBulb)) * 1000.;\n  }\n\n  // Return moist air specific volume given dry-bulb temperature, humidity ratio, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 26\n  // Notes: in IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26.\n  // The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻².\n  this.GetMoistAirVolume = function // (o) Specific Volume ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI]\n    ( TDryBulb                      // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , HumRatio                      // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    , Pressure                      // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var BoundedHumRatio;\n\n    if (!(HumRatio >= 0.))\n      throw new Error(\"Humidity ratio is negative\");\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    if (this.isIP())\n      return R_DA_IP * this.GetTRankineFromTFahrenheit(TDryBulb) * (1. + 1.607858 * BoundedHumRatio) / (144. * Pressure);\n    else\n      return R_DA_SI * this.GetTKelvinFromTCelsius(TDryBulb) * (1. + 1.607858 * BoundedHumRatio) / Pressure;\n  }\n\n  // Return dry-bulb temperature given moist air specific volume, humidity ratio, and pressure.\n  // Reference:\n  // ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26\n  // Notes:\n  // In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26\n  // The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻².\n  // Based on the `GetMoistAirVolume` function, rearranged for dry-bulb temperature.\n  this.GetTDryBulbFromMoistAirVolumeAndHumRatio = function  // (o) Dry-bulb temperature in °F [IP] or °C [SI]\n    ( MoistAirVolume                                        // (i) Specific volume of moist air in ft³ lb⁻¹ of dry air [IP] or in m³ kg⁻¹ of dry air [SI]\n    , HumRatio                                              // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    , Pressure                                              // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var BoundedHumRatio;\n\n    if (!(HumRatio >= 0.))\n      throw new Error(\"Humidity ratio is negative\");\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    if (this.isIP())\n      return this.GetTFahrenheitFromTRankine(MoistAirVolume * (144 * Pressure) / (R_DA_IP * (1 + 1.607858 * BoundedHumRatio)));\n    else\n      return  this.GetTCelsiusFromTKelvin(MoistAirVolume * Pressure / (R_DA_SI * (1 + 1.607858 * BoundedHumRatio)));\n  }\n\n  // Return moist air density given humidity ratio, dry bulb temperature, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 11\n  this.GetMoistAirDensity = function  // (o) Moist air density in lb ft⁻³ [IP] or kg m⁻³ [SI]\n    ( TDryBulb                        // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , HumRatio                        // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    , Pressure                        // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var BoundedHumRatio;\n\n    if (!(HumRatio >= 0.))\n      throw new Error(\"Humidity ratio is negative\");\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    return (1. + BoundedHumRatio) / this.GetMoistAirVolume(TDryBulb, BoundedHumRatio, Pressure);\n  }\n\n\n  /******************************************************************************************************\n   * Standard atmosphere\n   *****************************************************************************************************/\n\n  // Return standard atmosphere barometric pressure, given the elevation (altitude).\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 3\n  this.GetStandardAtmPressure = function  // (o) Standard atmosphere barometric pressure in Psi [IP] or Pa [SI]\n    ( Altitude                            // (i) Altitude in ft [IP] or m [SI]\n    ) {\n    var Pressure;\n\n    if (this.isIP())\n      Pressure = 14.696 * pow(1. - 6.8754e-06 * Altitude, 5.2559);\n    else\n      Pressure = 101325.* pow(1. - 2.25577e-05 * Altitude, 5.2559);\n    return Pressure;\n  }\n\n  // Return standard atmosphere temperature, given the elevation (altitude).\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 4\n  this.GetStandardAtmTemperature = function // (o) Standard atmosphere dry bulb temperature in °F [IP] or °C [SI]\n    ( Altitude                              // (i) Altitude in ft [IP] or m [SI]\n    ) {\n    var Temperature;\n    if (this.isIP())\n      Temperature = 59. - 0.00356620 * Altitude;\n    else\n      Temperature = 15. - 0.0065 * Altitude;\n    return Temperature;\n  }\n\n  // Return sea level pressure given dry-bulb temperature, altitude above sea level and pressure.\n  // Reference: Hess SL, Introduction to theoretical meteorology, Holt Rinehart and Winston, NY 1959,\n  // ch. 6.5; Stull RB, Meteorology for scientists and engineers, 2nd edition,\n  // Brooks/Cole 2000, ch. 1.\n  // Notes: the standard procedure for the US is to use for TDryBulb the average\n  // of the current station temperature and the station temperature from 12 hours ago.\n  this.GetSeaLevelPressure = function // (o) Sea level barometric pressure in Psi [IP] or Pa [SI]\n    ( StnPressure                     // (i) Observed station pressure in Psi [IP] or Pa [SI]\n    , Altitude                        // (i) Altitude above sea level in ft [IP] or m [SI]\n    , TDryBulb                        // (i) Dry bulb temperature ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI]\n    ) {\n      var TColumn, H;\n      if (this.isIP())\n      {\n        // Calculate average temperature in column of air, assuming a lapse rate\n        // of 3.6 °F/1000ft\n        TColumn = TDryBulb + 0.0036 * Altitude / 2.;\n\n        // Determine the scale height\n        H = 53.351 * this.GetTRankineFromTFahrenheit(TColumn);\n      }\n      else\n      {\n        // Calculate average temperature in column of air, assuming a lapse rate\n        // of 6.5 °C/km\n        TColumn = TDryBulb + 0.0065 * Altitude / 2.;\n\n        // Determine the scale height\n        H = 287.055 * this.GetTKelvinFromTCelsius(TColumn) / 9.807;\n      }\n\n      // Calculate the sea level pressure\n      var SeaLevelPressure = StnPressure * exp(Altitude / H);\n      return SeaLevelPressure;\n  }\n\n  // Return station pressure from sea level pressure\n  // Reference: see 'GetSeaLevelPressure'\n  // Notes: this function is just the inverse of 'GetSeaLevelPressure'.\n  this.GetStationPressure = function  // (o) Station pressure in Psi [IP] or Pa [SI]\n    ( SeaLevelPressure                // (i) Sea level barometric pressure in Psi [IP] or Pa [SI]\n    , Altitude                        // (i) Altitude above sea level in ft [IP] or m [SI]\n    , TDryBulb                        // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    ) {\n    return SeaLevelPressure / this.GetSeaLevelPressure(1., Altitude, TDryBulb);\n  }\n\n\n  /******************************************************************************************************\n   * Functions to set all psychrometric values\n   *****************************************************************************************************/\n\n  // Utility function to calculate humidity ratio, dew-point temperature, relative humidity,\n  // vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\n  // dry-bulb temperature, wet-bulb temperature, and pressure.\n  this.CalcPsychrometricsFromTWetBulb = function\n    /**\n     * HumRatio            // (o) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n     * TDewPoint           // (o) Dew point temperature in °F [IP] or °C [SI]\n     * RelHum              // (o) Relative humidity [0-1]\n     * VapPres             // (o) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n     * MoistAirEnthalpy    // (o) Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI]\n     * MoistAirVolume      // (o) Specific volume ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI]\n     * DegreeOfSaturation  // (o) Degree of saturation [unitless]\n     */\n    ( TDryBulb            // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , TWetBulb            // (i) Wet bulb temperature in °F [IP] or °C [SI]\n    , Pressure            // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var HumRatio = this.GetHumRatioFromTWetBulb(TDryBulb, TWetBulb, Pressure);\n    var TDewPoint = this.GetTDewPointFromHumRatio(TDryBulb, HumRatio, Pressure);\n    var RelHum = this.GetRelHumFromHumRatio(TDryBulb, HumRatio, Pressure);\n    var VapPres = this.GetVapPresFromHumRatio(HumRatio, Pressure);\n    var MoistAirEnthalpy = this.GetMoistAirEnthalpy(TDryBulb, HumRatio);\n    var MoistAirVolume = this.GetMoistAirVolume(TDryBulb, HumRatio, Pressure);\n    var DegreeOfSaturation = this.GetDegreeOfSaturation(TDryBulb, HumRatio, Pressure);\n    return [HumRatio, TDewPoint, RelHum, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation];\n  }\n\n  // Utility function to calculate humidity ratio, wet-bulb temperature, relative humidity,\n  // vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\n  // dry-bulb temperature, dew-point temperature, and pressure.\n  this.CalcPsychrometricsFromTDewPoint = function\n    /**\n     * HumRatio            // (o) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n     * TWetBulb            // (o) Wet bulb temperature in °F [IP] or °C [SI]\n     * RelHum              // (o) Relative humidity [0-1]\n     * VapPres             // (o) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n     * MoistAirEnthalpy    // (o) Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI]\n     * MoistAirVolume      // (o) Specific volume ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI]\n     * DegreeOfSaturation  // (o) Degree of saturation [unitless]\n     */\n    ( TDryBulb            // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , TDewPoint           // (i) Dew point temperature in °F [IP] or °C [SI]\n    , Pressure            // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var HumRatio = this.GetHumRatioFromTDewPoint(TDewPoint, Pressure);\n    var TWetBulb = this.GetTWetBulbFromHumRatio(TDryBulb, HumRatio, Pressure);\n    var RelHum = this.GetRelHumFromHumRatio(TDryBulb, HumRatio, Pressure);\n    var VapPres = this.GetVapPresFromHumRatio(HumRatio, Pressure);\n    var MoistAirEnthalpy = this.GetMoistAirEnthalpy(TDryBulb, HumRatio);\n    var MoistAirVolume = this.GetMoistAirVolume(TDryBulb, HumRatio, Pressure);\n    var DegreeOfSaturation = this.GetDegreeOfSaturation(TDryBulb, HumRatio, Pressure);\n    return [HumRatio, TWetBulb, RelHum, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation];\n  }\n\n  // Utility function to calculate humidity ratio, wet-bulb temperature, dew-point temperature,\n  // vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\n  // dry-bulb temperature, relative humidity and pressure.\n  this.CalcPsychrometricsFromRelHum = function\n    /**\n     * HumRatio            // (o) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n     * TWetBulb            // (o) Wet bulb temperature in °F [IP] or °C [SI]\n     * TDewPoint           // (o) Dew point temperature in °F [IP] or °C [SI]\n     * VapPres             // (o) Partial pressure of water vapor in moist air [Psi]\n     * MoistAirEnthalpy    // (o) Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI]\n     * MoistAirVolume      // (o) Specific volume ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI]\n     * DegreeOfSaturation  // (o) Degree of saturation [unitless]\n    */\n    ( TDryBulb            // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    , RelHum              // (i) Relative humidity [0-1]\n    , Pressure            // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n    ) {\n    var HumRatio = this.GetHumRatioFromRelHum(TDryBulb, RelHum, Pressure);\n    var TWetBulb = this.GetTWetBulbFromHumRatio(TDryBulb, HumRatio, Pressure);\n    var TDewPoint = this.GetTDewPointFromHumRatio(TDryBulb, HumRatio, Pressure);\n    var VapPres = this.GetVapPresFromHumRatio(HumRatio, Pressure);\n    var MoistAirEnthalpy = this.GetMoistAirEnthalpy(TDryBulb, HumRatio);\n    var MoistAirVolume = this.GetMoistAirVolume(TDryBulb, HumRatio, Pressure);\n    var DegreeOfSaturation = this.GetDegreeOfSaturation(TDryBulb, HumRatio, Pressure);\n    return [HumRatio, TWetBulb, TDewPoint, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation];\n  }\n}\n\n// https://github.com/umdjs/umd\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n      // Node. Does not work with strict CommonJS, but\n      // only CommonJS-like environments that support module.exports,\n      // like Node.\n      module.exports = factory();\n  } else {\n      // Browser globals (root is window)\n      root.psychrolib = factory();\n}\n}(typeof self !== 'undefined' ? self : this, function () {\n  return new Psychrometrics();\n}));\n","module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import React from 'react';\n\nexport class Container extends React.Component<{ child: Element }> {\n  render() {\n    return (\n      <div\n        ref={(ref) => {\n          const child = ref?.firstChild;\n          if (child instanceof Element) {\n            ref?.removeChild(child);\n          }\n          ref?.appendChild(this.props.child);\n        }}\n      ></div>\n    );\n  }\n}\n","/**\n * Contains special mathematics functions.\n */\nexport class JMath {\n  /**\n   * Clamp the number `x` between `min` and `max`, returns a number `[min, max]`\n   */\n  static clamp(x: number, min: number, max: number) {\n    return (x < min) ? min : (x > max) ? max : x;\n  }\n\n  /**\n   * Normalize a number `x` from the coordinate system `[min, max]`\n   */\n  static normalize(x: number, min: number, max: number): number {\n    return (x - min) / (max - min);\n  }\n\n  /**\n   * Expand a normalized number `x` to the coordinate system `[min, max]`\n   */\n  static expand(x: number, min: number, max: number): number {\n    return x * (max - min) + min;\n  }\n\n  /**\n   * Translate a number `x` from one coordinate system `[a, b]` to another `[c, d]`\n   */\n  static translate(x: number, a: number, b: number, c: number, d: number) {\n    return JMath.expand(JMath.normalize(x, a, b), c, d);\n  }\n\n  /**\n   * Convert from Celsius to Fahrenheit\n   */\n  static CtoF(C: number): number {\n    return (9 / 5) * C + 32;\n  }\n\n  /**\n   * Convert from Fahrenheit to Celsius\n   */\n  static FtoC(F: number): number {\n    return (5 / 9) * (F - 32);\n  }\n\n  /**\n   * Determine if the value is numeric or not.\n   */\n  static isNumber(x: any): boolean {\n    return typeof x === 'number';\n  }\n\n  /**\n   * Check if two numbers `a` and `b` are approximately equal eith a maximum absolute error of `epsilon`.\n   */\n  static approx(a: number, b: number, epsilon = 1e-6): boolean {\n    return a - b < epsilon && b - a < epsilon;\n  }\n\n  /**\n   * Round the number `x` to `d` decimal places.\n   */\n  static round(x: number, d = 0): number {\n    return Math.round(x * 10 ** d) / (10 ** d);\n  }\n}\n","import { JMath } from './jmath';\n\n/**\n * Represents a class for storing an RGBA color value.\n */\nexport class Color {\n    private red: number;\n    private green: number;\n    private blue: number;\n    private alpha: number;\n    /**\n     * Initialize a new color.\n     */\n    constructor(red: number, green: number, blue: number, alpha = 100) {\n        this.red = JMath.clamp(red, 0, 255);\n        this.green = JMath.clamp(green, 0, 255);\n        this.blue = JMath.clamp(blue, 0, 255);\n        this.alpha = JMath.clamp(alpha, 0, 100);\n    }\n    /**\n     * Return the more contrasting color, black or\n     * white, depending on the current color.\n     */\n    getContrastingColor(): Color {\n        if (this.red + this.green * 1.5 + this.blue * 0.5 > 255 * 1.5) {\n            return new Color(0, 0, 0);\n        } else {\n            return new Color(255, 255, 255);\n        }\n    }\n    /**\n     * Return a string representation of this color.\n     */\n    toString(): string {\n        return 'rgb(' + this.red + ',' + this.green + ',' + this.blue + ',' + this.alpha + '%)';\n    }\n    /**\n     * Compute a gradient where `x` is in the range `[0, 1]` and `colors` is an array of colors.\n     */\n    static gradient(x: number, colors: Color[]): Color {\n        if (colors.length === 0) {\n            throw new Error('Must input at least 1 color to create a gradient.');\n        } else if (colors.length === 1) {\n            return colors[0];\n        } else if (x <= 0) {\n            return colors[0];\n        } else if (x >= 1) {\n            return colors[colors.length - 1];\n        }\n        const N = colors.length - 1, // number of buckets\n            s = 1 / N, // size of each bucket\n            n = Math.floor(x / s), // bucket number\n            a = s * n, // bucket min value\n            b = s * (n + 1), // bucket max value\n            A = colors[n], // bucket min color\n            B = colors[n + 1]; //bucket max color\n        return new Color(\n            JMath.translate(x, a, b, A.red, B.red),\n            JMath.translate(x, a, b, A.green, B.green),\n            JMath.translate(x, a, b, A.blue, B.blue),\n            JMath.translate(x, a, b, A.alpha, B.alpha));\n    }\n}\n","import { JMath } from './jmath';\nimport { PsyOptions, Datum, Layout, Point } from './types';\nconst Psychrolib = require('psychrolib');\n\n/**\n * Represents a single air condition using several states.\n */\nexport class PsyState {\n    /**\n     * Dry Bulb\n     */\n    readonly db: number;\n    /**\n     * Relative Humidity\n     */\n    readonly rh: number = 0;\n    /**\n     * Wet Bulb\n     */\n    readonly wb: number = 0;\n    /**\n     * Dew Point\n     */\n    readonly dp: number = 0;\n    /**\n     * Humidity Ratio\n     */\n    readonly hr: number = 0;\n    /**\n     * Vapor Pressure\n     */\n    readonly vp: number = 0;\n    /**\n     * Moist Air Enthalpy\n     */\n    readonly h: number = 0;\n    /**\n     * Moist Air Volume\n     */\n    readonly v: number = 0;\n    /**\n     * Standard Atmospheric Air Pressure\n     */\n    private static atm: number;\n    /**\n     * Minimum Dry Bulb\n     */\n    private static dbMin: number;\n    /**\n     * Maximum Dry Bulb\n     */\n    private static dbMax: number;\n    /**\n     * Maximum Humidity Ratio\n     */\n    private static hrMax: number;\n    /**\n     * Psychart panel width\n     */\n    private static width: number;\n    /**\n     * Psychart panel height\n     */\n    private static height: number;\n    /**\n     * Psychart panel padding\n     */\n    private static padding: number;\n    /**\n     * Compute a first-time initialization of psychrolib.\n     */\n    static initialize(layout: Layout, config: PsyOptions): void {\n        PsyState.width = layout.size.x;\n        PsyState.height = layout.size.y;\n        PsyState.padding = layout.padding;\n        Psychrolib.SetUnitSystem(config.unitSystem === 'IP' ? Psychrolib.IP : Psychrolib.SI);\n        PsyState.atm = Psychrolib.GetStandardAtmPressure(config.altitude);\n        PsyState.dbMin = config.dbMin;\n        PsyState.dbMax = config.dbMax;\n        PsyState.hrMax = Psychrolib.GetHumRatioFromTDewPoint(config.dpMax, PsyState.atm);\n    }\n    /**\n     * Initialize a new psychrometric state.\n     */\n    constructor(state: Datum) {\n        this.db = state.db;\n        if (typeof state.rh === 'number') {\n            const PSY_CALC = Psychrolib.CalcPsychrometricsFromRelHum(state.db, state.rh, PsyState.atm);\n            this.rh = state.rh;\n            this.wb = PSY_CALC[1];\n            this.dp = PSY_CALC[2];\n            this.hr = PSY_CALC[0];\n            this.vp = PSY_CALC[3];\n            this.h = PSY_CALC[4];\n            this.v = PSY_CALC[5];\n        }\n        else if (typeof state.wb === 'number') {\n            const PSY_CALC = Psychrolib.CalcPsychrometricsFromTWetBulb(state.db, state.wb, PsyState.atm);\n            this.rh = PSY_CALC[2];\n            this.wb = state.wb;\n            this.dp = PSY_CALC[1];\n            this.hr = PSY_CALC[0];\n            this.vp = PSY_CALC[3];\n            this.h = PSY_CALC[4];\n            this.v = PSY_CALC[5];\n        }\n        else if (typeof state.dp === 'number') {\n            const PSY_CALC = Psychrolib.CalcPsychrometricsFromTDewPoint(state.db, state.dp, PsyState.atm);\n            this.rh = PSY_CALC[2];\n            this.wb = PSY_CALC[1];\n            this.dp = state.dp;\n            this.hr = PSY_CALC[0];\n            this.vp = PSY_CALC[3];\n            this.h = PSY_CALC[4];\n            this.v = PSY_CALC[5];\n        } else {\n            throw new Error('Invalid state. Series not found?');\n        }\n    }\n    /**\n     * Convert this psychrometric state to an X-Y coordinate on a psychrometric chart.\n     */\n    toXY(): Point {\n        return {\n            x: JMath.clamp(JMath.translate(this.db, PsyState.dbMin, PsyState.dbMax, PsyState.padding, PsyState.width - PsyState.padding), PsyState.padding, PsyState.width - PsyState.padding),\n            y: JMath.clamp(PsyState.height - JMath.translate(this.hr, 0, PsyState.hrMax, PsyState.padding, PsyState.height - PsyState.padding), PsyState.padding, PsyState.height - PsyState.padding)\n        };\n    }\n}\n","import { Color } from './color';\nimport { JMath } from './jmath';\nimport { PsyState } from './psystate';\nimport { PsyOptions, Datum, Layout, Point, Region, StyleOptions, GradientName, RegionName } from './types';\n\nconst NS = 'http://www.w3.org/2000/svg';\n\nexport class Psychart {\n    /**\n     * Defines the string representations of the current unit system.\n     */\n    private readonly units = {\n        temp: '',\n        hr: '',\n        vp: '',\n        h: '',\n        v: '',\n    };\n    /**\n     * Defines the base element to attach to the viewing window.\n     */\n    private readonly base: SVGElement = document.createElementNS(NS, 'svg');\n    /**\n     * Defines all the groups in the SVG ordered by layer.\n     */\n    private readonly g = {\n        regions: document.createElementNS(NS, 'g'),\n        axes: document.createElementNS(NS, 'g'),\n        text: document.createElementNS(NS, 'g'),\n        trends: document.createElementNS(NS, 'g'),\n        points: document.createElementNS(NS, 'g'),\n        tooltips: document.createElementNS(NS, 'g'),\n    };\n    /**\n     * Gradient source: https://waldyrious.net/viridis-palette-generator/\n     */\n    private static readonly gradients: { [K in GradientName]: Color[] } = {\n        Viridis: [\n            new Color(68, 1, 84),\n            new Color(59, 82, 139),\n            new Color(33, 145, 140),\n            new Color(94, 201, 98),\n            new Color(253, 231, 37),\n        ],\n        Inferno: [\n            new Color(0, 0, 4),\n            new Color(87, 16, 110),\n            new Color(188, 55, 84),\n            new Color(249, 142, 9),\n            new Color(252, 255, 164),\n        ],\n        Magma: [\n            new Color(0, 0, 4),\n            new Color(81, 18, 124),\n            new Color(183, 55, 121),\n            new Color(252, 137, 97),\n            new Color(252, 253, 191),\n        ],\n        Plasma: [\n            new Color(13, 8, 135),\n            new Color(126, 3, 168),\n            new Color(204, 71, 120),\n            new Color(248, 149, 64),\n            new Color(240, 249, 33),\n        ],\n        Blue: [\n            new Color(193, 231, 255),\n            new Color(105, 150, 179),\n            new Color(0, 76, 109),\n        ],\n    };\n    /**\n     * Predefined regions source: 2021 Equipment Thermal Guidelines for Data Processing Environments\n     * ASHRAE-55 source: https://comfort.cbe.berkeley.edu/\n     */\n    private static readonly regions: { [K in RegionName]: Region } = {\n        'Summer (sitting)': {\n            tooltip: 'ASHRAE-55 (Human comfort)\\nAir speed = 0.1 m/s\\nMET = 1.0 (seated)\\nCLO = 0.5 (summer clothing)',\n            data: [\n                { db: 32.8, rh: 0 },\n                { db: 27.2, rh: 1 },\n                { db: 22.7, rh: 1 },\n                { db: 26.9, rh: 0 },\n            ],\n        },\n        'Summer (walking)': {\n            tooltip: 'ASHRAE-55 (Human comfort)\\nAir speed = 0.1 m/s\\nMET = 1.5 (walking)\\nCLO = 0.5 (summer clothing)',\n            data: [\n                { db: 31.2, rh: 0 },\n                { db: 25.8, rh: 1 },\n                { db: 20.3, rh: 1 },\n                { db: 23.2, rh: 0 },\n            ],\n        },\n        'Summer (light work)': {\n            tooltip: 'ASHRAE-55 (Human comfort)\\nAir speed = 0.1 m/s\\nMET = 2.0 (light work)\\nCLO = 0.5 (summer clothing)',\n            data: [\n                { db: 30.4, rh: 0 },\n                { db: 24.8, rh: 1 },\n                { db: 19.2, rh: 1 },\n                { db: 22.0, rh: 0 },\n            ],\n        },\n        'Winter (sitting)': {\n            tooltip: 'ASHRAE-55 (Human comfort)\\nAir speed = 0.1 m/s\\nMET = 1.0 (seated)\\nCLO = 1.0 (winter clothing)',\n            data: [\n                { db: 28.6, rh: 0 },\n                { db: 22.7, rh: 1 },\n                { db: 17.1, rh: 1 },\n                { db: 20.5, rh: 0 },\n            ],\n        },\n        'Winter (walking)': {\n            tooltip: 'ASHRAE-55 (Human comfort)\\nAir speed = 0.1 m/s\\nMET = 1.5 (walking)\\nCLO = 1.0 (winter clothing)',\n            data: [\n                { db: 26.8, rh: 0 },\n                { db: 21.5, rh: 1 },\n                { db: 14.5, rh: 1 },\n                { db: 17.2, rh: 0 },\n            ],\n        },\n        'Winter (light work)': {\n            tooltip: 'ASHRAE-55 (Human comfort)\\nAir speed = 0.1 m/s\\nMET = 2.0 (light work)\\nCLO = 1.0 (winter clothing)',\n            data: [\n                { db: 25.6, rh: 0 },\n                { db: 20.4, rh: 1 },\n                { db: 13.1, rh: 1 },\n                { db: 15.5, rh: 0 },\n            ],\n        },\n        'Data Center A4': {\n            tooltip: 'The A4 ASHRAE data center\\ncomfort zone. Typically\\nan IT space with low\\nenvironmental requirements.',\n            data: [\n                { db: 5, dp: -12 },\n                { db: 22.5, rh: 0.08 },\n                { db: 45.0, rh: 0.08 },\n                { db: 45.0, dp: 24 },\n                { db: 25.8, rh: 0.90 },\n                { db: 5, rh: 0.90 },\n            ],\n        },\n        'Data Center A3': {\n            tooltip: 'The A3 ASHRAE data center\\ncomfort zone. Typically\\nan IT space with normal\\nenvironmental requirements.',\n            data: [\n                { db: 5, dp: -12 },\n                { db: 22.5, rh: 0.08 },\n                { db: 40.0, rh: 0.08 },\n                { db: 40.0, dp: 24 },\n                { db: 26.7, rh: 0.85 },\n                { db: 5, rh: 0.85 },\n            ],\n        },\n        'Data Center A2': {\n            tooltip: 'The A2 ASHRAE data center\\ncomfort zone. Typically\\nan IT space with strict\\nenvironmental requirements.',\n            data: [\n                { db: 10.0, dp: -12 },\n                { db: 22.5, rh: 0.08 },\n                { db: 35.0, rh: 0.08 },\n                { db: 35.0, dp: 21 },\n                { db: 24.7, rh: 0.80 },\n                { db: 10.0, rh: 0.80 },\n            ],\n        },\n        'Data Center A1': {\n            tooltip: 'The A1 ASHRAE data\\ncenter comfort zone.\\nTypically a data center with\\nmission-critical operations.',\n            data: [\n                { db: 15.0, dp: -12 },\n                { db: 22.5, rh: 0.08 },\n                { db: 32.0, rh: 0.08 },\n                { db: 32.0, dp: 17 },\n                { db: 20.6, rh: 0.80 },\n                { db: 15.0, rh: 0.80 },\n            ],\n        },\n        'Data Center Recommended (low pollutants)': {\n            tooltip: 'The \"recommended\" ASHRAE\\ncomfort zone for data centers\\nwith conditions with low\\nconcentration of pollutants.',\n            data: [\n                { db: 18.0, dp: -9 },\n                { db: 27.0, dp: -9 },\n                { db: 27.0, dp: 15 },\n                { db: 20.7, rh: 0.70 },\n                { db: 18.0, rh: 0.70 },\n            ],\n        },\n        'Data Center Recommended (high pollutants)': {\n            tooltip: 'The \"recommended\" ASHRAE\\ncomfort zone for data centers\\nwith conditions with high\\nconcentration of pollutants.',\n            data: [\n                { db: 18.0, dp: -9 },\n                { db: 27.0, dp: -9 },\n                { db: 27.0, dp: 15 },\n                { db: 26.2, rh: 0.50 },\n                { db: 18.0, rh: 0.50 },\n            ],\n        },\n    };\n    /**\n     * The last state plotted on Psychart.\n     */\n    private lastState?: PsyState;\n    /**\n     * The timestamp of which Psychart was initialized. For plotting, this represents the origin.\n     */\n    private readonly startTime: number;\n    /**\n     * The timestamp that's used as the final time for plotting. By default, this is 1 hour after `startTime`\n     */\n    private readonly endTime: number;\n    /**\n     * Return an array of all gradient names.\n     */\n    static getGradientNames(): GradientName[] {\n        return Object.keys(this.gradients).filter(name => name !== 'Blue') as GradientName[];\n    }\n    /**\n     * Return an array of region names and their corresponding tooltips.\n     */\n    static getRegionNamesAndTips(): Array<[RegionName, string]> {\n        return Object.entries(this.regions).map(([name, region]) => [name as RegionName, region.tooltip]);\n    }\n    /**\n     * Return some suggested style options based on if the current display is dark or light theme.\n     */\n    static getDefaultStyleOptions(isDarkTheme: boolean): StyleOptions {\n        return {\n            darkTheme: isDarkTheme,\n            fontColor: isDarkTheme ? new Color(208, 208, 208) : new Color(32, 32, 32),\n            lineColor: isDarkTheme ? new Color(48, 48, 48) : new Color(224, 224, 224),\n            fontSize: 12,\n            resolution: 0.5,\n            major: 10,\n            timeSpan: 60 * 60 * 1e3,\n        } as StyleOptions;\n    }\n    /**\n     * Construct a new instance of `Psychart` given various configuration properties.\n     */\n    constructor(private readonly layout: Layout, private readonly config: PsyOptions, private readonly style: StyleOptions) {\n        // Compute a first-time initialization of psychrolib\n        PsyState.initialize(layout, config);\n        // Check to make sure that dpMax is less than dbMax\n        if (config.dpMax > config.dbMax) {\n            throw new Error('Dew point maximum is greater than dry bulb range!');\n        }\n        // Set the starting and ending timestamps\n        this.startTime = Date.now();\n        this.endTime = this.startTime + this.style.timeSpan;\n        // Set the chart's viewport size.\n        this.base.setAttribute('viewBox', '0 0 ' + this.layout.size.x + ' ' + this.layout.size.y);\n        // Sets the displayed units based on the unit system.\n        this.units.temp = '\\u00B0' + (this.config.unitSystem === 'IP' ? 'F' : 'C');\n        this.units.hr = (this.config.unitSystem === 'IP' ? 'lbw/lba' : 'kgw/kga');\n        this.units.vp = (this.config.unitSystem === 'IP' ? 'Psi' : 'Pa');\n        this.units.h = (this.config.unitSystem === 'IP' ? 'Btu/lb' : 'J/kg');\n        this.units.v = (this.config.unitSystem === 'IP' ? 'ft\\u00B3/lb' : 'm\\u00B3/kg');\n        // Create new SVG groups, and append all the\n        // layers into the chart.\n        Object.values(this.g).forEach(group => this.base.appendChild(group));\n        // Draw constant dry bulb vertical lines.\n        for (let db = this.config.dbMin; db <= this.config.dbMax; db += this.style.major) {\n            const data: PsyState[] = [];\n            // The lower point is on the X-axis (rh = 0%)\n            data.push(new PsyState({ db: db, rh: 0 }));\n            // The upper point is on the saturation line (rh = 100%)\n            data.push(new PsyState({ db: db, rh: 1 }));\n            // Draw the axis and the label\n            this.drawAxis(data);\n            this.drawLabel(db + this.units.temp, data[0], TextAnchor.N, 'Dry Bulb');\n        }\n        // Draw constant dew point horizontal lines.\n        for (let dp = 0; dp <= this.config.dpMax; dp += this.style.major) {\n            const data: PsyState[] = [];\n            // The left point is on the saturation line (db = dp)\n            data.push(new PsyState({ db: dp, dp: dp }));\n            // The right point is at the maximum dry bulb temperature\n            data.push(new PsyState({ db: this.config.dbMax, dp: dp }));\n            // Draw the axis and the label\n            this.drawAxis(data);\n            this.drawLabel(dp + this.units.temp, data[1], TextAnchor.W, 'Dew Point');\n        }\n        // Draw constant wet bulb diagonal lines.\n        for (let wb = this.config.dbMin; wb <= this.config.dpMax; wb += this.style.major) {\n            const data: PsyState[] = [];\n            // Dry bulb is always equal or greater than wet bulb.\n            for (let db = wb; db <= this.config.dbMax; db += this.style.resolution) {\n                data.push(new PsyState({ db: db, wb: wb }));\n            }\n            // Draw the axis and the label\n            this.drawAxis(data);\n            this.drawLabel(wb + this.units.temp, data[0], TextAnchor.SE, 'Wet Bulb');\n        }\n        // Draw constant relative humidity lines.\n        for (let rh = 0; rh <= 100; rh += this.style.major) {\n            const data: PsyState[] = [];\n            let preferredAnchor: TextAnchor = TextAnchor.NE;\n            // Must iterate through all dry bulb temperatures to calculate each Y-coordinate\n            for (let db = this.config.dbMin; db <= this.config.dbMax; db += this.style.resolution) {\n                data.push(new PsyState({ db: db, rh: rh / 100 }));\n                // Stop drawing when the line surpasses the bounds of the chart\n                if (data[data.length - 1].dp >= this.config.dpMax) {\n                    preferredAnchor = TextAnchor.S;\n                    break;\n                }\n            }\n            // Draw the axis and the label\n            this.drawAxis(data);\n            if (rh > 0 && rh < 100) {\n                this.drawLabel(rh + '%', data[data.length - 1], preferredAnchor, 'Relative Humidity');\n            }\n        }\n        // Draw any regions, if applicable\n        let regionIndex = 0;\n        Object.entries(Psychart.regions)\n            .filter(([name,]) => config.regions?.includes(name as RegionName))\n            .forEach(([, region]) => {\n                const numRegions = this.config.regions.length,\n                    normalized = this.style.darkTheme ? JMath.normalize(regionIndex, numRegions, 0) : JMath.normalize(regionIndex, 0, numRegions),\n                    data = this.deepCopy(region.data);\n                if (this.config.unitSystem === 'IP') {\n                    // Convert from SI to US units\n                    data.forEach(datum => {\n                        datum.db = JMath.CtoF(datum.db);\n                        if (typeof datum.wb === 'number') {\n                            datum.wb = JMath.CtoF(datum.wb);\n                        } else if (typeof datum.dp === 'number') {\n                            datum.dp = JMath.CtoF(datum.dp);\n                        }\n                    });\n                }\n                this.drawRegion(data, Color.gradient(normalized, Psychart.gradients.Blue), region.tooltip);\n                regionIndex++;\n            });\n    }\n    /**\n     * Generate SVG path data from an array of psychrometric states.\n     */\n    private setPathData(path: SVGPathElement, psystates: PsyState[], closePath: boolean): void {\n        path.setAttribute('d', 'M ' + psystates.map(psy => {\n            const xy = psy.toXY();\n            return xy.x + ',' + xy.y;\n        }).join(' ') + (closePath ? ' z' : ''));\n    }\n    /**\n     * Draw an axis line given an array of psychrometric states.\n     */\n    private drawAxis(data: PsyState[]): void {\n        this.g.axes.appendChild(this.createLine(data, this.style.lineColor, 1.0));\n    }\n    /**\n     * Create a line to append onto a parent element.\n     */\n    private createLine(data: PsyState[], color: Color, weight: number): SVGPathElement {\n        const line = document.createElementNS(NS, 'path');\n        line.setAttribute('fill', 'none');\n        line.setAttribute('stroke', color.toString());\n        line.setAttribute('stroke-width', weight + 'px');\n        line.setAttribute('vector-effect', 'non-scaling-stroke');\n        // Convert the array of psychrometric states into an array of (x,y) points.\n        this.setPathData(line, data, false);\n        return line;\n    }\n    /**\n     * Draw an axis label.\n     */\n    private drawLabel(text: string, location: PsyState, anchor: TextAnchor, tooltip?: string): void {\n        const label = this.createLabel(text, location.toXY(), this.style.fontColor, anchor);\n        this.g.text.appendChild(label);\n        if (!!tooltip) {\n            label.addEventListener('mouseover', e => this.drawTooltip(tooltip, { x: e.offsetX, y: e.offsetY }, this.style.fontColor));\n            label.addEventListener('mouseleave', () => this.clearChildren(this.g.tooltips));\n        }\n    }\n    /**\n     * Create a label to append onto a parent element.\n     */\n    private createLabel(text: string, location: Point, color: Color, anchor: TextAnchor): SVGTextElement {\n        const label = document.createElementNS(NS, 'text');\n        label.setAttribute('fill', color.toString());\n        label.setAttribute('font-family', 'sans-serif');\n        label.setAttribute('font-size', this.style.fontSize + 'px');\n        // Use the `x`, `y`, `text-anchor`, and `dominant-baseline` properties to set the text anchor\n        switch (anchor) {\n            case (TextAnchor.NW): {\n                label.setAttribute('x', (location.x + this.style.fontSize / 2).toString());\n                label.setAttribute('y', (location.y + this.style.fontSize / 2).toString());\n                label.setAttribute('text-anchor', 'start');\n                label.setAttribute('dominant-baseline', 'hanging');\n                break;\n            }\n            case (TextAnchor.N): {\n                label.setAttribute('x', location.x.toString());\n                label.setAttribute('y', (location.y + this.style.fontSize / 2).toString());\n                label.setAttribute('text-anchor', 'middle');\n                label.setAttribute('dominant-baseline', 'hanging');\n                break;\n            }\n            case (TextAnchor.NE): {\n                label.setAttribute('x', (location.x - this.style.fontSize / 2).toString());\n                label.setAttribute('y', (location.y + this.style.fontSize / 2).toString());\n                label.setAttribute('text-anchor', 'end');\n                label.setAttribute('dominant-baseline', 'hanging');\n                break;\n            }\n            case (TextAnchor.E): {\n                label.setAttribute('x', (location.x - this.style.fontSize / 2).toString());\n                label.setAttribute('y', location.y.toString());\n                label.setAttribute('text-anchor', 'end');\n                label.setAttribute('dominant-baseline', 'middle');\n                break;\n            }\n            case (TextAnchor.SE): {\n                label.setAttribute('x', (location.x - this.style.fontSize / 2).toString());\n                label.setAttribute('y', (location.y - this.style.fontSize / 2).toString());\n                label.setAttribute('text-anchor', 'end');\n                label.setAttribute('dominant-baseline', 'alphabetic');\n                break;\n            }\n            case (TextAnchor.S): {\n                label.setAttribute('x', location.x.toString());\n                label.setAttribute('y', (location.y - this.style.fontSize / 2).toString());\n                label.setAttribute('text-anchor', 'middle');\n                label.setAttribute('dominant-baseline', 'alphabetic');\n                break;\n            }\n            case (TextAnchor.SW): {\n                label.setAttribute('x', (location.x + this.style.fontSize / 2).toString());\n                label.setAttribute('y', (location.y - this.style.fontSize / 2).toString());\n                label.setAttribute('text-anchor', 'start');\n                label.setAttribute('dominant-baseline', 'alphabetic');\n                break;\n            }\n            case (TextAnchor.W): {\n                label.setAttribute('x', (location.x + this.style.fontSize / 2).toString());\n                label.setAttribute('y', location.y.toString());\n                label.setAttribute('text-anchor', 'start');\n                label.setAttribute('dominant-baseline', 'middle');\n                break;\n            }\n            case (TextAnchor.C): {\n                label.setAttribute('x', location.x.toString());\n                label.setAttribute('y', location.y.toString());\n                label.setAttribute('text-anchor', 'middle');\n                label.setAttribute('dominant-baseline', 'middle');\n                break;\n            }\n            default: {\n                throw new Error('Text anchor ' + anchor + ' is invalid.');\n            }\n        }\n        label.textContent = text;\n        return label;\n    }\n    /**\n     * Create a tooltip element.\n     */\n    private drawTooltip(text: string, location: Point, color: Color): void {\n        const tooltipBase = document.createElementNS(NS, 'g'),\n            labelElements: SVGTextElement[] = [],\n            padding = 10,\n            background = document.createElementNS(NS, 'rect');\n        // Generate an array of SVGTextElement containing each line of this tooltip\n        text.split('\\n').forEach((line, i) => labelElements.push(this.createLabel(line, { x: 0, y: i * this.style.fontSize }, color.getContrastingColor(), TextAnchor.NW)));\n        // Append the elements onto the window\n        tooltipBase.appendChild(background);\n        labelElements.forEach(element => tooltipBase.appendChild(element));\n        this.g.tooltips.appendChild(tooltipBase);\n        // Compute the maximum width of any line in this tooltip and height for the background\n        const maxWidth = labelElements.map(element => element.getBBox().width).reduce((a, b) => Math.max(a, b)) + padding,\n            maxHeight = labelElements.length * this.style.fontSize + padding;\n        // Define styling properties for the tooltip background\n        background.setAttribute('stroke', color.getContrastingColor().toString());\n        background.setAttribute('fill', color.toString());\n        background.setAttribute('x', '0');\n        background.setAttribute('y', '0');\n        background.setAttribute('width', maxWidth + 'px');\n        background.setAttribute('height', maxHeight + 'px');\n        background.setAttribute('rx', (padding / 2) + 'px');\n        background.setAttribute('stroke-width', '1px');\n        // Adjust the position if out-of-bounds\n        if (location.x + padding + maxWidth > this.layout.size.x) {\n            location.x -= (maxWidth + padding);\n        } else {\n            location.x += padding;\n        }\n        if (location.y + padding + maxHeight > this.layout.size.y) {\n            location.y -= (maxHeight + padding);\n        } else {\n            location.y += padding;\n        }\n        tooltipBase.setAttribute('transform', 'translate(' + location.x + ',' + location.y + ')');\n    }\n    /**\n     * Remove all the children from an element.\n     */\n    private clearChildren(element: Element): void {\n        while (element.firstChild) {\n            element.removeChild(element.firstChild);\n        }\n    }\n    /**\n     * Produce a deep copy of an object.\n     */\n    private deepCopy<T>(obj: T): T {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    /**\n     * Plot one psychrometric state onto the psychrometric chart.\n     */\n    plot(state: Datum, time: number = Date.now(), startTime: number = this.startTime, endTime: number = this.endTime): void {\n        // Divide by 100 if relHumType is set to 'percent'\n        if (typeof state.rh === 'number' && this.config.relHumType === 'percent') {\n            state.rh /= 100;\n        }\n        const currentState = new PsyState(state),\n            location = currentState.toXY();\n        // Compute the current color to plot\n        const normalized = JMath.normalize(time, startTime, endTime),\n            color = Color.gradient(normalized, Psychart.gradients[this.config.gradient as GradientName] ?? Psychart.gradients.Viridis);\n        // Determine whether to connect the states with a line\n        if (!!this.lastState) {\n            this.g.trends.appendChild(this.createLine([this.lastState, currentState], color, +this.config.line));\n        }\n        this.lastState = currentState;\n        // Define a 0-length path element and assign its attributes.\n        const point = document.createElementNS(NS, 'path');\n        point.setAttribute('fill', 'none');\n        point.setAttribute('stroke', color.toString());\n        point.setAttribute('stroke-width', +this.config.pointRadius + 'px');\n        point.setAttribute('stroke-linecap', 'round');\n        point.setAttribute('vector-effect', 'non-scaling-stroke');\n        point.setAttribute('d', 'M ' + location.x + ',' + location.y + ' h 0');\n        this.g.points.appendChild(point);\n        // Generate the text to display on mouse hover.\n        const tooltipString = new Date(time).toLocaleString() + '\\n' +\n            JMath.round(currentState.db, 1) + this.units.temp + ' Dry Bulb\\n' +\n            JMath.round(currentState.rh * 100) + '% Rel. Hum.\\n' +\n            JMath.round(currentState.wb, 1) + this.units.temp + ' Wet Bulb\\n' +\n            JMath.round(currentState.dp, 1) + this.units.temp + ' Dew Point' +\n            (this.config.advanced ? '\\n' +\n                JMath.round(currentState.hr, 2) + ' ' + this.units.hr + ' Hum. Ratio\\n' +\n                JMath.round(currentState.vp, 1) + ' ' + this.units.vp + ' Vap. Press.\\n' +\n                JMath.round(currentState.h, 1) + ' ' + this.units.h + ' Enthalpy\\n' +\n                JMath.round(currentState.v, 2) + ' ' + this.units.v + ' Volume' : '');\n        // Set the behavior when the user interacts with this point\n        point.addEventListener('mouseover', e => this.drawTooltip(tooltipString, { x: e.offsetX, y: e.offsetY }, color));\n        point.addEventListener('mouseleave', () => this.clearChildren(this.g.tooltips));\n    }\n    /**\n     * Draw a shaded region on Psychart.\n     */\n    drawRegion(states: Datum[], color: Color, tooltip?: string): void {\n        // Add the first state to the data set\n        const data: PsyState[] = [new PsyState(states[0])];\n        for (let i = 1; i < states.length; i++) {\n            const lastDatum = states[i - 1],\n                currentDatum = states[i];\n            // Check if iso-relative humidity (curved line)\n            if (typeof lastDatum.rh === 'number' && typeof currentDatum.rh === 'number' && JMath.approx(lastDatum.rh, currentDatum.rh)) {\n                const range = Math.abs(currentDatum.db - lastDatum.db);\n                // Calculate several psychrometric states with a dry bulb step of `resolution`\n                for (let i = 0; i < range; i += this.style.resolution) {\n                    const db = JMath.translate(i, 0, range, lastDatum.db, currentDatum.db);\n                    data.push(new PsyState({ db: db, rh: lastDatum.rh }));\n                }\n            }\n            // Assume iso-dry bulb, wet bulb, or dew point (straight line)\n            data.push(new PsyState(currentDatum));\n        }\n        // Create the SVG element to render the shaded region\n        const region = document.createElementNS(NS, 'path');\n        region.setAttribute('fill', color.toString());\n        this.setPathData(region, data, true);\n        this.g.regions.appendChild(region);\n        // Optionally render a tooltip on mouse hover\n        if (!!tooltip) {\n            region.addEventListener('mouseover', e => this.drawTooltip(tooltip, { x: e.offsetX, y: e.offsetY }, color));\n            region.addEventListener('mouseleave', () => this.clearChildren(this.g.tooltips));\n        }\n    }\n    /**\n     * Clear all plotted data from Psychart.\n     */\n    clearData(): void {\n        this.lastState = undefined;\n        this.clearChildren(this.g.points);\n        this.clearChildren(this.g.trends);\n    }\n    /**\n     * Clear all rendered regions from Psychart.\n     */\n    clearRegions(): void {\n        this.clearChildren(this.g.regions);\n    }\n    /**\n     * Return the SVG element to append on the parent.\n     */\n    getElement(): SVGElement {\n        return this.base;\n    }\n}\n\n/**\n * Represents where the origin is in relation to the text.\n */\nenum TextAnchor {\n    NW, N, NE, E, SE, S, SW, W, C\n}\n","import React from 'react';\nimport { PanelProps } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\nimport { Layout, PsyOptions } from './types';\nimport { Container } from './container';\nimport { format } from './formatter';\nimport { Psychart } from './psychart';\n\nexport const PsyPanel: React.FC<PanelProps<PsyOptions>> = ({ options, data, width, height }) => {\n  const isDarkTheme = useTheme2().isDark;\n  try {\n    const layout = { padding: 30, size: { x: width, y: height } } as Layout,\n      style = Psychart.getDefaultStyleOptions(isDarkTheme),\n      psychart = new Psychart(layout, options, style),\n      formatted = format(data),\n      startTime = data.timeRange.from.unix() * 1e3,\n      endTime = data.timeRange.to.unix() * 1e3;\n    for (let t in formatted) {\n      switch (options.measurements) {\n        case ('dbwb'): {\n          if (typeof options.dryBulb === 'string' && typeof options.wetBulb === 'string') {\n            psychart.plot({ db: formatted[t][options.dryBulb], wb: formatted[t][options.wetBulb] }, +t, startTime, endTime);\n          }\n          break;\n        }\n        case ('dbrh'): {\n          if (typeof options.dryBulb === 'string' && typeof options.relHum === 'string') {\n            psychart.plot({ db: formatted[t][options.dryBulb], rh: formatted[t][options.relHum] }, +t, startTime, endTime);\n          }\n          break;\n        }\n        case ('dbdp'): {\n          if (typeof options.dryBulb === 'string' && typeof options.dewPoint === 'string') {\n            psychart.plot({ db: formatted[t][options.dryBulb], dp: formatted[t][options.dewPoint] }, +t, startTime, endTime);\n          }\n          break;\n        }\n        default: {\n          throw new Error('Invalid measurement type.');\n        }\n      }\n    }\n    return <Container child={psychart.getElement()} />;\n  } catch (ex: any) {\n    return (\n      <div className=\"panel-empty\">\n        <p>{ex.name + ': ' + ex.message}</p>\n      </div>\n    );\n  }\n};\n","import { GradientName } from 'types';\n\nimport viridis from './img/viridis.png';\nimport inferno from './img/inferno.png';\nimport magma from './img/magma.png';\nimport plasma from './img/plasma.png';\n\nexport const icons: { [K in GradientName]: string } = {\n    Viridis: viridis,\n    Inferno: inferno,\n    Magma: magma,\n    Plasma: plasma,\n    Blue: '',\n};\n","import { PanelPlugin, Field } from '@grafana/data';\nimport { PsyOptions } from './types';\nimport { PsyPanel } from './panel';\nimport { Psychart } from 'psychart';\nimport { icons } from 'icons';\n\nexport const plugin = new PanelPlugin<PsyOptions>(PsyPanel).setPanelOptions((builder) => {\n  return builder\n    .addRadio({\n      path: 'unitSystem',\n      name: 'Unit System',\n      description: 'Select a unit system.',\n      defaultValue: 'IP',\n      category: ['Chart options'],\n      settings: {\n        allowCustomValue: false,\n        options: [\n          {\n            value: 'IP',\n            label: 'Imperial',\n          },\n          {\n            value: 'SI',\n            label: 'SI Units',\n          },\n        ],\n      },\n    })\n    .addNumberInput({\n      path: 'altitude',\n      name: 'Altitude',\n      description: 'Enter the altitude from sea level in feet or meters.',\n      defaultValue: 0,\n      category: ['Chart options'],\n      settings: {\n        step: 1,\n        integer: true,\n      },\n    })\n    .addNumberInput({\n      path: 'dbMin',\n      name: 'Minimum Dry Bulb Temperature',\n      description: 'Enter the minimum dry bulb temperature to display, or the lower x-bound.',\n      defaultValue: 20,\n      category: ['Chart options'],\n      settings: {\n        step: 10,\n        integer: true,\n      },\n    })\n    .addNumberInput({\n      path: 'dbMax',\n      name: 'Maximum Dry Bulb Temperature',\n      description: 'Enter the maximum dry bulb temperature to display, or the upper x-bound.',\n      defaultValue: 120,\n      category: ['Chart options'],\n      settings: {\n        step: 10,\n        integer: true,\n      },\n    })\n    .addNumberInput({\n      path: 'dpMax',\n      name: 'Maximum Dew Point Temperature',\n      description: 'Enter the maximum dew point temperature to display, or the upper y-bound.',\n      defaultValue: 90,\n      category: ['Chart options'],\n      settings: {\n        step: 10,\n        integer: true,\n      },\n    })\n    .addMultiSelect({\n      path: 'regions',\n      name: 'ASHRAE Comfort Regions',\n      description: 'Select which ASHRAE comfort regions to display.',\n      category: ['Chart options'],\n      settings: {\n        allowCustomValue: false,\n        options: Psychart.getRegionNamesAndTips().map(([name, tip]) => {\n          return {\n            value: name,\n            label: name,\n            description: tip,\n          };\n        }),\n      },\n    })\n    .addSelect({\n      path: 'measurements',\n      name: 'Measurements',\n      description: 'Select which series are being measured.',\n      defaultValue: 'dbwb',\n      category: ['Data options'],\n      settings: {\n        allowCustomValue: false,\n        options: [\n          {\n            value: 'dbwb',\n            label: 'Dry Bulb & Wet Bulb',\n          },\n          {\n            value: 'dbdp',\n            label: 'Dry Bulb & Dew Point',\n          },\n          {\n            value: 'dbrh',\n            label: 'Dry Bulb & Rel. Humidity',\n          },\n        ],\n      },\n    })\n    .addFieldNamePicker({\n      path: 'dryBulb',\n      name: 'Dry Bulb Series',\n      description: 'Select a series that measures the dry bulb temperature.',\n      category: ['Data options'],\n      settings: {\n        filter: (f: Field) => f.type === 'number',\n        noFieldsMessage: 'No valid fields found',\n      },\n    })\n    .addFieldNamePicker({\n      path: 'wetBulb',\n      name: 'Wet Bulb Series',\n      description: 'Select a series that measures the wet bulb temperature.',\n      category: ['Data options'],\n      settings: {\n        filter: (f: Field) => f.type === 'number',\n        noFieldsMessage: 'No valid fields found',\n      },\n      showIf: (x) => x.measurements === 'dbwb',\n    })\n    .addFieldNamePicker({\n      path: 'dewPoint',\n      name: 'Dew Point Series',\n      description: 'Select a series that measures the dew point temperature.',\n      category: ['Data options'],\n      settings: {\n        filter: (f: Field) => f.type === 'number',\n        noFieldsMessage: 'No valid fields found',\n      },\n      showIf: (x) => x.measurements === 'dbdp',\n    })\n    .addFieldNamePicker({\n      path: 'relHum',\n      name: 'Relative Humidity Series',\n      description: 'Select a series that measures the relative humidity.',\n      category: ['Data options'],\n      settings: {\n        filter: (f: Field) => f.type === 'number',\n        noFieldsMessage: 'No valid fields found',\n      },\n      showIf: (x) => x.measurements === 'dbrh',\n    })\n    .addRadio({\n      path: 'relHumType',\n      name: 'Relative Humidity Type',\n      description: 'Choose how relative humidity is actively being measured.',\n      category: ['Data options'],\n      defaultValue: 'percent',\n      settings: {\n        allowCustomValue: false,\n        options: [\n          {\n            value: 'percent',\n            label: '100%',\n          },\n          {\n            value: 'float',\n            label: '0.0-1.0',\n          },\n        ],\n      },\n      showIf: (x) => x.measurements === 'dbrh',\n    })\n    .addSliderInput({\n      path: 'pointRadius',\n      name: 'Point Size',\n      description: 'Enter the point radius, in pixels.',\n      defaultValue: 5,\n      category: ['Display options'],\n      settings: {\n        min: 1,\n        max: 10,\n        step: 1,\n      },\n    })\n    .addBooleanSwitch({\n      path: 'line',\n      name: 'Show Line',\n      description: 'Connect data points with a line?',\n      defaultValue: true,\n      category: ['Display options'],\n    })\n    .addRadio({\n      path: 'gradient',\n      name: 'Gradient',\n      description: 'The series color gradient.',\n      category: ['Display options'],\n      settings: {\n        allowCustomValue: false,\n        options: Psychart.getGradientNames().map(name => {\n          return {\n            value: name,\n            label: name,\n            imgUrl: icons[name],\n          };\n        }),\n      },\n      defaultValue: 'Viridis',\n    })\n    .addBooleanSwitch({\n      path: 'advanced',\n      name: 'Show Advanced State Variables',\n      description: 'Additionally show humidity ratio, vapor pressure, enthalpy, and specific volume on hover.',\n      defaultValue: false,\n      category: ['Display options'],\n    });\n});\n","import { PanelData } from '@grafana/data';\n\n/**\n * Format and clean up the panel data.\n * All series are expected to be time\n * series and have unique field names.\n * @param data The data object generated by the panel.\n * @returns A formatted object of panel data.\n * `{ timestamp : { field : value, ... }, ... }`\n */\nexport function format(data: PanelData): { [index: number]: { [index: string]: number } } {\n  const formatted: { [index: number]: { [index: string]: number } } = {};\n  data.series.forEach((frame) => {\n    frame.fields\n      .find((field) => field.type === 'time')\n      ?.values.toArray()\n      .forEach((t: number, i: number) => {\n        frame.fields\n          .filter((field) => field.type === 'number')\n          .forEach((field) => {\n            formatted[t] = formatted[t] || {};\n            formatted[t][frame.name as string] = field.values.get(i);\n            formatted[t][field.name] = field.values.get(i);\n          });\n      });\n  });\n  return formatted;\n}\n"],"names":["Psychrometrics","log","Math","exp","pow","min","max","abs","ZERO_FAHRENHEIT_AS_RANKINE","ZERO_CELSIUS_AS_KELVIN","R_DA_IP","R_DA_SI","MIN_HUM_RATIO","TRIPLE_POINT_WATER_IP","PSYCHROLIB_UNITS","undefined","PSYCHROLIB_TOLERANCE","this","IP","SI","SetUnitSystem","UnitSystem","Error","GetUnitSystem","isIP","GetTRankineFromTFahrenheit","T_F","GetTFahrenheitFromTRankine","T_R","GetTKelvinFromTCelsius","T_C","GetTCelsiusFromTKelvin","T_K","GetTWetBulbFromTDewPoint","TDryBulb","TDewPoint","Pressure","HumRatio","GetHumRatioFromTDewPoint","GetTWetBulbFromHumRatio","GetTWetBulbFromRelHum","RelHum","GetHumRatioFromRelHum","GetRelHumFromTDewPoint","GetSatVapPres","GetRelHumFromTWetBulb","TWetBulb","GetHumRatioFromTWetBulb","GetRelHumFromHumRatio","GetTDewPointFromRelHum","VapPres","GetVapPresFromRelHum","GetTDewPointFromVapPres","GetTDewPointFromTWetBulb","GetTDewPointFromHumRatio","GetRelHumFromVapPres","dLnPws_","dLnPws","T","BOUNDS","TDewPoint_iter","lnVP_iter","lnVP","index","d_lnVP","GetVapPresFromTDewPoint","TWetBulbSup","TWetBulbInf","BoundedHumRatio","Wsstar","GetSatHumRatio","GetHumRatioFromVapPres","GetVapPresFromHumRatio","GetSpecificHumFromHumRatio","GetHumRatioFromSpecificHum","SpecificHum","GetDryAirEnthalpy","GetDryAirDensity","GetDryAirVolume","GetTDryBulbFromEnthalpyAndHumRatio","MoistAirEnthalpy","GetHumRatioFromEnthalpyAndTDryBulb","LnPws","SatVaporPres","GetSatAirEnthalpy","GetMoistAirEnthalpy","GetVaporPressureDeficit","GetDegreeOfSaturation","GetMoistAirVolume","GetTDryBulbFromMoistAirVolumeAndHumRatio","MoistAirVolume","GetMoistAirDensity","GetStandardAtmPressure","Altitude","GetStandardAtmTemperature","GetSeaLevelPressure","StnPressure","TColumn","H","GetStationPressure","SeaLevelPressure","CalcPsychrometricsFromTWetBulb","CalcPsychrometricsFromTDewPoint","CalcPsychrometricsFromRelHum","self","module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","r","Symbol","toStringTag","value","Container","React","render","div","ref","child","firstChild","Element","removeChild","appendChild","props","JMath","static","x","b","c","expand","normalize","C","F","epsilon","round","Color","getContrastingColor","red","green","blue","toString","alpha","colors","length","s","floor","A","B","translate","constructor","clamp","Psychrolib","require","PsyState","layout","config","width","size","height","y","padding","unitSystem","atm","altitude","dbMin","dbMax","hrMax","dpMax","toXY","db","hr","state","rh","wb","dp","vp","h","v","PSY_CALC","NS","Psychart","keys","gradients","filter","name","entries","regions","map","region","tooltip","isDarkTheme","darkTheme","fontColor","lineColor","fontSize","resolution","major","timeSpan","path","psystates","closePath","setAttribute","psy","xy","join","data","g","axes","createLine","style","color","weight","line","document","createElementNS","setPathData","text","location","anchor","label","createLabel","addEventListener","e","drawTooltip","offsetX","offsetY","clearChildren","tooltips","TextAnchor","NW","N","NE","E","SE","S","SW","W","textContent","tooltipBase","labelElements","background","split","forEach","i","push","element","maxWidth","getBBox","reduce","maxHeight","JSON","parse","stringify","plot","time","Date","now","startTime","endTime","relHumType","currentState","normalized","gradient","Viridis","lastState","trends","point","pointRadius","points","tooltipString","toLocaleString","units","temp","advanced","drawRegion","states","lastDatum","currentDatum","approx","range","clearData","clearRegions","getElement","base","initialize","values","group","drawAxis","drawLabel","preferredAnchor","regionIndex","includes","numRegions","deepCopy","datum","CtoF","Blue","Inferno","Magma","Plasma","icons","plugin","PanelPlugin","options","useTheme2","isDark","getDefaultStyleOptions","psychart","formatted","series","frame","fields","find","field","type","toArray","t","format","timeRange","from","unix","to","measurements","dryBulb","wetBulb","relHum","dewPoint","ex","className","p","message","setPanelOptions","builder","addRadio","description","defaultValue","category","settings","allowCustomValue","addNumberInput","step","integer","addMultiSelect","getRegionNamesAndTips","tip","addSelect","addFieldNamePicker","f","noFieldsMessage","showIf","addSliderInput","addBooleanSwitch","getGradientNames","imgUrl"],"sourceRoot":""}